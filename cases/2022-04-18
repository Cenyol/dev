### 背景说明
#### 需求背景
活动有预约功能，在用户预约活动之后，需要向用户发送预约成功的提示消息，并将相关的活动tips链接送达，供其参考。

#### 预约平台
当前头条系这边已经有一个预约平台，支持用户预约、取消预约、预约状态查询，以及预约的活动开始之后对用户进行消息推送，进行提示。而针对用户预约成功之后的实时提示消息并没有。也就是说目前只有定时消息推送，无实时消息推送。说真的，实时消息推送的实现难度比定时消息推送容易多了，这里仅说实时这个逻辑比定时的逻辑容易，因为消息推送在底层技术架构已经实现。

#### 业务研发
对于业务研发前后端的同学来说，有两种方案可选：
1. 由后端同学直接去对接预约平台的后端，让后者在用户预约成功写入DB之后，抛个MQ事件出来，业务后端的同学消费这个MQ事件即可。后端之间的交互简单快速且安全，服务之间还能解耦。  但是吧，由于预约平台的RD短期之内没有人力，所以这个优雅的方案被对方给拒绝了，想不通！弄个MQ最多半天好吧，又不需要额外的测试。
2. 在业务前端发起预约之后，如果预约平台返回预约成功的消息，业务前端程序反手再调用业务后端提供的消息发送逻辑，执行“用户预约成功消息”触达逻辑。本该由预约平台与业务后端之间的直接交互，塞了个前端进行，相当不优雅，而且前端本来就不可控，且中间还经过了两次外网请求链路，难受！

### 解决方案
一开始，我（业务后端）极力赞成方案1，应该说极力反对方案2。奈何预约平台人家不肯加MQ，后来扯出了另一个MQ，是整个头条系的所有APP用户的互动MQ，数据量相当的大。由于预约平台的预约行为数据也有加到这大杂烩MQ里面，所以预约平台的RD让我去消费这个互动MQ。一开始吧，我想着说反正都是MQ，而且数据都是你预约平台生产的，应该差不多。
经过两天的折腾我发现我还是太naive了，在BOE(测试环境)测试的时候，由于数据量小，消费速度还挺快，效果也行。第二天整到PPE(预发布≈线上)的时候，发现事情不对劲儿。由于整个头条系的线上APP互动数据相当大，在对互动MQ做了消息过滤之后，还部署了70多个4核4G的实例，还是赶不上消费速度，lag线性上涨。又是折腾了一天，还是放弃了，为了这么小的预约数据去部署这么多实例，我感觉很不值，而且还很难消费到(lag大，消息延迟太高了)。如果这么做，不仅大量浪费公司服务器资源，而且用户体验也很不好（消息延迟太长）。

最后，还是只能选择方案2。这个方案是不优雅，但是实现它仅需要我们业务前后端的同学自己来做就行，不需要依赖别人。中间做一些重试，我们一天就实现了整个逻辑，数据流实时且简单。

### 存在问题
个人对于工作难度以及排期预估不够准确。本来吧，这个功能如果对方预约平台肯配合，加个MQ，我们也是一样一天能够按照方案1来完成的。但是人家不配合（说是人力排期都已经用完了）。我以为对于他们提供的底层互动MQ是一样的，理论上来说是一样的，但你架不住人家数据量那么大啊，光弄个consumer就要70多个实例，不忍心为了这么点数据搞这么多的资源，而且用户体验也不好。白白耗费了我自己3天的人力资源，真是对不住公司，哈哈。

### 反思心得
以后对于方案的选择，还是要兼顾实现难度和耗时，再问问PM(需求方)是否是个临时的功能。像这次这个，方案2就是个临时方案，以后不需要这么用，临时先用也行。